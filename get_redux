#!/usr/bin/env python3

from httplib2 import Http
from urllib.parse import urlencode
import urllib.request
import json
from pprint import PrettyPrinter
import re
import argparse
import sys
import os.path

config_file = os.path.expanduser('~/.get_redux.cfg')

def get_config(config_file):
    fin = open(config_file)
    config = json.load(fin)
    return(config)

def get_output_filename(programme_data):
    programme_title = re.sub('\s', "_", programme_data['title'])
    if 'position' in programme_data['episode']:
        episode_number = programme_data['episode']['position']
    else:
        episode_number = "XX"
    if 'series' in programme_data:
        series_title = re.sub('\s', "_", programme_data['series']['title'])
    else:
        series_title = "special"
    episode_title = re.sub('\s', "_", programme_data['episode']['title'])
    
    filename_extension = re.split("-", options.media)[0]

    output_filename = programme_title 
    if not programme_title == series_title:
        output_filename = output_filename + "_-_" + series_title 
    output_filename = output_filename + "_-_Episode_" + str(episode_number).zfill(2) 
    if not re.match("^episode_[0-9]", episode_title, flags=re.I):
        output_filename = output_filename +"_-_" + episode_title 
    output_filename = output_filename + "." + filename_extension

    return(output_filename)

def get_search_url(show):
    search_string = re.sub("\s", "+", show)
    search_url_stub = "http://devapi.bbcredux.com/search.json?limit=256&sort=date&pname="
    search_url = search_url_stub + search_string
    return search_url

def get_programmes(search_url, date):
    http = create_http_connection()

    resp, content = http.request(search_url)

    if re.match("^4", resp['status']):
        print("Problem searching " + search_url + " Status: " + resp['status'])
        sys.exit(1)
    else:
        data = json.loads(str(content.decode("utf-8")))

    programmes = []
    for programme in data["results"]:
        if date: 
            if (programme["date"] == date):
                programmes.append(programme["diskref"])
        else:
            programmes.append(programme["diskref"])

    programmes.reverse() # puts earliest pisode first
    return(programmes)

def create_http_connection():
    http = Http(".cache")
    http.add_credentials(config['username'], config['password'])
    return(http)

def get_programme_content(programme):
    http = create_http_connection()

    resp, content = http.request("http://devapi.bbcredux.com/programme/" + programme + ".json")

    if re.match("^4", resp['status']):
        print("Problem searching " + search_url + " Status: " + resp['status'])
        sys.exit(1)
    else:
        data = json.loads(str(content.decode("utf-8")))
	
        if options.debug:
            pp = PrettyPrinter(indent=4)
            pp.pprint(data)
	
        if data['type'] == options.type:
            output_filename = get_output_filename(data)
	
            media_uri = data['media'][options.media]['uri']
            if not options.debug:
                urllib.request.urlretrieve(media_uri, output_filename)

            print(media_uri + " downloaded as " + output_filename)

def main():
    parser = argparse.ArgumentParser('download all shows with a show name matching a particular pattern')
    parser.add_argument('-s', '--show', dest="show", required=True, 
                        help="name of the show to be downloaded")
    parser.add_argument('-m', '--media', dest="media", default="mp4-hi", 
                        help="type of file to be downloaded, e.g. mp3, mp4-hi")
    parser.add_argument('-t', '--type', dest="type", default="tv",
                        help="type of show. 'tv' or 'radio'")
    parser.add_argument("-z", "--date", dest="date", default=False,
                        help="date to search on. Format YYYY-MM-DD")
    parser.add_argument('-d', '--debug', action="store_true", default=False)
    #parser.add_argument('-l', '--list', action="store_true", default=False)

    global options
    options = parser.parse_args()

    global config
    config = get_config(config_file)

    if options.type == "radio":
        options.media = "mp3"

    if not options.show:
        parser.print_help()
        sys.exit()

    search_url = get_search_url(options.show)
    programmes = get_programmes(search_url, options.date)

    if options.debug:
        pp = PrettyPrinter(indent=4)
        pp.pprint(programmes)

    for programme in programmes:
        get_programme_content(programme)
	
if __name__ == "__main__":
    main()

